{"tagline":"API documentation generation tool that uses a strict grammer to ensure consistency.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Panino-docs","body":"# Introduction\r\n\r\nPanino is an API documentation generation tool. It can read comments from your source files, or, parse Markdown files and generate the same documentation. Panino runs on [Node.js](http://www.nodejs.org), and uses [Jade](http://jade-lang.com/) as its templating engine.\r\n\r\nPanino parses your content following a strict, no-crap-allowed grammar that ensures **correct** and **consistent** documentation, because you've written it following a specific syntax. This means that there is a very specific set of rules and expectations as to how to write your documentation. These rules are not terribly hard or unweildly. Keeping documentation parsed through a grammar ensures thorough and consistent docs, no matter who it's written by. \r\n\r\nThis project is forked from [ndoc](https://github.com/nodeca/ndoc), which itself is based off of [pdoc](https://github.com/tobie/pdoc). ([This blog post](http://andrewdupont.net/2008/11/16/pdoc-inline-documentation-for-prototype/) identifies some of the advantages over other commenting-to-documentation systems. In a nutshell, though:\r\n\r\n> Unlike other inline-doc parsers, PDoc does not rely on the JavaScript source code at all; it only parses the comments. This approach, though slightly more verbose, is much better at generating consistent, reliable documentation, and avoids the headaches encountered when documenting highly dynamic languages.\r\n\r\n# Installation\r\n\r\nYou'll need `node.js` and `npm` installed. Then, you can can choose to install Panino globally:\r\n\r\n    npm install -g panino\r\n\r\nFrom the command line, just run\r\n\r\n    node panino --path [source_files]\r\n\r\nOtherwise, you can write a simple build script to do the work for you. Here's how that might look:\r\n\r\n```javascript\r\nvar options = {\r\n  title       : \"Node.js Manual TEST\",\r\n  linkFormat  : 'http://example.com/{file}#{line}',\r\n  output      : './nodemanual',\r\n  skin        : \"./skins/goose/templates/layout.jade\",\r\n  assets      : \"./skins/goose/assets\",\r\n  additionalObjs : \"./additionalObjs.json\",\r\n  parseOptions   : \"./nodeParseOptions.json\"\r\n};\r\n\r\nvar files = wrench.readdirSyncRecursive(\"./nodejs_ref_guide\").map(function(f) {\r\n  return path.join(__dirname + \"/nodejs_ref_guide/\" + f);\r\n});\r\n\r\npanino.parse(files, options, function (err, ast) {\r\n  if (err) {\r\n    console.error(err);\r\n    process.exit(1);\r\n  }\r\n\r\n  panino.render('html', ast, options, function (err) {\r\n    if (err) {\r\n      console.error(err);\r\n      process.exit(1);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n# License\r\n\r\nThis project is distributed under the [GPL](https://github.com/gjtorikian/panino-docs/blob/master/LICENSE) license.\r\n\r\n# Why the Name?\r\n\r\n_Panino_ refers to [a type of sandwich in Italy](http://en.wikipedia.org/wiki/Panini_\\(sandwich\\)#Terminology). Panini is its plural form, but is often mistakenly used as the singular. It seemed important to draw attention to the fact that what you're defining should represent what it actually is, in documentation and beyond.","google":""}